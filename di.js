// Generated by CoffeeScript 1.3.3
var di;

di = (function() {

  function di() {
    this.serviceFactories = {};
    this.servicesByTags = {};
    this.services = {};
  }

  di.prototype.set = function(servicename, instance) {
    var _this = this;
    this.services[servicename] = instance;
    this['get' + this._ucfirst(servicename)] = function() {
      return _this.get(servicename)();
    };
    return this;
  };

  di.prototype.get = function(serviceName) {
    var _this = this;
    if (typeof this.services[serviceName] !== "undefined") {
      return (function() {
        return _this.services[serviceName];
      });
    }
    if (typeof this.serviceFactories[serviceName] === "function") {
      return (function() {
        return _this.services[serviceName] = _this.serviceFactories[serviceName](_this);
      });
    }
    if (typeof this.serviceFactories[serviceName] === "object") {
      if (typeof this.serviceFactories[serviceName]['factory'] !== "function") {
        throw {
          msg: 'service ' + serviceName + ' needs a factory configuration.',
          serviceName: serviceName
        };
      }
      if (!this.serviceFactories[serviceName]['shared']) {
        return (function() {
          return _this.serviceFactories[serviceName]['factory'](_this);
        });
      }
      return (function() {
        return _this.services[serviceName] = _this.serviceFactories[serviceName](_this);
      });
    }
    throw {
      msg: 'service ' + serviceName + ' doesnt exists.',
      serviceName: serviceName
    };
  };

  di.prototype._ucfirst = function(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
  };

  di.prototype.getByTag = function(tag) {
    var t, _results;
    if (!this.servicesByTags[tag]) {
      return [];
    }
    _results = [];
    for (t in this.servicesByTags[tag]) {
      _results.push(this.get(t));
    }
    return _results;
  };

  di.prototype.configure = function(configuration) {
    var factoryName, tag, tags, _i, _len,
      _this = this;
    if (configuration['factories']) {
      for (factoryName in configuration['factories']) {
        this.serviceFactories[factoryName] = configuration['factories'][factoryName];
        if (configuration['factories'][factoryName]['tag']) {
          tags = configuration['factories'][factoryName]['tag'];
          if (typeof tags === "string") {
            tags = [tags];
          }
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            tag = tags[_i];
            if (!this.servicesByTags[tag]) {
              this.servicesByTags[tag] = {};
            }
            this.servicesByTags[tag][factoryName] = factoryName;
          }
        }
        this['get' + (function(f) {
          return _this._ucfirst(f);
        })(factoryName)] = (function(f) {
          return function() {
            return _this.get(f)();
          };
        })(factoryName);
      }
    }
    return this;
  };

  return di;

})();

if (typeof module !== "undefined") {
  module.exports = di;
}
